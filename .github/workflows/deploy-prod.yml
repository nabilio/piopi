name: Deploy PROD to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Validate deployment configuration
        env:
          VPS_HOST: ${{ vars.VPS_HOST }}
          VPS_USER: ${{ vars.VPS_USER }}
        run: |
          set -euo pipefail
          if [[ -z "${VPS_HOST}" ]]; then
            echo "::error::La variable de dépôt VPS_HOST n'est pas configurée." >&2
            exit 1
          fi

          if [[ -z "${VPS_USER}" ]]; then
            echo "::error::La variable de dépôt VPS_USER n'est pas configurée." >&2
            exit 1
          fi

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Check SSH availability
        env:
          VPS_HOST: ${{ vars.VPS_HOST }}
          VPS_USER: ${{ vars.VPS_USER }}
          VPS_PORT: ${{ vars.VPS_PORT }}
        run: |
          set -euo pipefail
          HOST="$VPS_HOST"
          USER="$VPS_USER"
          PORT="${VPS_PORT:-22}"

          for attempt in {1..5}; do
            echo "Tentative de connexion SSH #${attempt} vers ${HOST}:${PORT}..."
            if ssh -o StrictHostKeyChecking=accept-new -o ConnectTimeout=15 -p "$PORT" "$USER@$HOST" "exit 0"; then
              echo "Connexion SSH établie."
              exit 0
            fi

            echo "Connexion SSH échouée, nouvelle tentative dans 15 secondes..."
            sleep 15
          done

          echo "::error::Impossible de contacter ${HOST}:${PORT} après 5 tentatives." >&2
          exit 1

      - name: Deploy application
        env:
          VPS_HOST: ${{ vars.VPS_HOST }}
          VPS_USER: ${{ vars.VPS_USER }}
          VPS_PORT: ${{ vars.VPS_PORT }}
        run: |
          set -euo pipefail
          HOST="$VPS_HOST"
          USER="$VPS_USER"
          PORT="${VPS_PORT:-22}"

          ssh -o StrictHostKeyChecking=accept-new -p "$PORT" "$USER@$HOST" 'bash -s' <<'EOF'
set -euo pipefail
APP_DIR=/home/adminio/htdocs/lapsi.online
PROC_NAME=piopi-prod
PORT=3001

# initialiser nvm si disponible pour que node/npm soient dans le PATH
export NVM_DIR="$HOME/.nvm"
if [ -s "$NVM_DIR/nvm.sh" ]; then
  . "$NVM_DIR/nvm.sh"
elif [ -s "/usr/local/nvm/nvm.sh" ]; then
  . "/usr/local/nvm/nvm.sh"
elif [ -s "/opt/nvm/nvm.sh" ]; then
  . "/opt/nvm/nvm.sh"
fi

if ! command -v node >/dev/null 2>&1; then
  echo "Node.js introuvable dans le PATH" >&2
  exit 1
fi

if ! command -v npm >/dev/null 2>&1; then
  echo "npm introuvable dans le PATH" >&2
  exit 1
fi

node -v
npm -v

cd "$APP_DIR"
git fetch origin main
git reset --hard origin/main

npm ci
npm run build

if ! command -v pm2 >/dev/null 2>&1; then npm i -g pm2; fi
if ! command -v serve >/dev/null 2>&1; then npm i -g serve; fi

pm2 delete "$PROC_NAME" || true
pm2 start "serve -s ./dist -l $PORT" --name "$PROC_NAME"
pm2 save

# si sudo nginx -t demande un mot de passe, garde seulement le reload laissé à l'UI CloudPanel
# sudo nginx -t && sudo systemctl reload nginx
EOF
